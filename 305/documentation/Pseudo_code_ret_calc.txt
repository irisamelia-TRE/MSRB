# Made by Brett Krutiansky
# Document: http://www.mass.gov/treasury/docs/retirement/retguide2015.pdf

# Members contribute a percent of their regular compensation based upon when they joined a 
# retirement system in Massachusetts.
# page 3
def contributions_by_Members-in-service(self.start_date ):
	if self.start_date  < Jan 1, 1975:
		contribution_rate = .05
	if  Jan 1 1975 <= self.start_date  < Jan 1, 1984:
		contribution_rate = .07
	if  Jan 1 1984 <= self.start_date  <= Jun 30, 1996:
		contribution_rate = .08
	if  July 1, 1996 <= self.start_date :
		contribution_rate = .09

	# Exceptions to contribution rate 
	# page 4
	if self.job == state_police && July 1, 1996 <= self.start_date :
		contribution_rate = .12
	if  self.job.group == 1 && self.credit_service_years >= 30 && 
	April 2, 2012 <= self.start_date:
		contribution_rate = .06
	if Jan 1, 1979 <= Jan 1, 1979 && self.annual_pay >= 30000:
		contribution_rate += .02

# As a member-in-service you earn creditable service toward a retirement 
# allowance for the time during which you contributed a percentage of 
# your salary to the retirement system.
def creditable_service()
	if self.employee == 'full-time':
		credible_service = self.credit_service_years

	else:
		credible_service = self.credit_service_years * .5

	#exception
	if self.self.start_date => Aug 1973:
		credible_service = contract_service_purchase()



# Note that calculation for Dual members needs board approval
# page 5

# Note that you have to take a mandatory minimum distribution of your retirement 
# account when you turn age 70.5. There are multiple options up to the user on
# how someone wants to approach this problem.
# page 6


# Retirement allowance is made of annuity and pension.
# for more info on specifics of retirement allowance go to page 14

# The position, occupation, and the duties one performs determines their group classifcation.
#page 15
def group_classification():
	# User will read from the following options and need to select which group they are

	# Group one - Members are offcials and general employees including clerical, 
	# administrative and technical workers, laborers, mechanics, and all others 
	# not otherwise classifed.
	if user.select_group == 'GROUP 1':
		self.job.group == 'GROUP 1'

	# Group two - Members in this group include probation officers, court officers, 
	# certain correctional positions whose major duties require them to have 
	# the care, custody, instruction or supervision of prisoners, 
	# and certain positions who provide direct care, custody, instruction or supervision of 
	# persons with mental illness or developmental disabilities.
	if user.select_group == 'GROUP 2':
		self.job.group == 'GROUP 2'

	# Group three – Members are exclusively State Police officers.
	if user.select_group == 'GROUP 3':
		self.job.group == 'GROUP 3'

	# Group four – Members include certain public safety officers and officials, 
	# correction officers and certain other correction positions, and parole officers or 
	# parole supervisors.
	if user.select_group == 'GROUP 4':
		self.job.group == 'GROUP 4'


# There are two types of disability retriement
# ordinary disability and accidental disability 
# page 17
def disability_retirement():
	# User will read from the following options and need to select which group they are

	# Ordinary disability - an illness or injury which is not job related. 
	# You must be vested with ten years of full-time creditable service. 
	# If you are a veteran, you would receive 50% of your last year’s salary average. 
	# Non- veterans younger than their minimum retirement age (either 55 or 60 depending on 
	# when you enter service) will have their regular retirement calculated as if you had 
	# reached the minimum retirement age.
	if user.select_disability == 'ORDINARY':
		if self.self.credit_service_years >= 10:
			if self.veteran == TRUE:
				pension = self.salary_avg * .5
			else:
				self.age = GROUP_RET_AGE_MIN



	# Accidental Disability - a job related illness or injury. Members approved for 
	# accidental disability will receive 72% of their last 12 months salary average. 
	# You do not need to be vested.
	if user.select_disability == 'ACCIDENTAL':
		pension = self.salary_avg * .72

	# Also tell user that to be eligible for a disability retirement, to contact the 
	# Disability Unit located in Boston.  And that the disability process takes an average
	# of 12 months to complete.

# There are three options to choose from A, B, and C
# once retired this option can't be switched.
# page 17 - 19
def retirement_allowance_options():
	# Option A - No Survivior Benefit. Member gets full retirement allowance while alive
	# but after death payments stop.

	# Option B - Protects Your Annunity. Like option A there is a lifetime allowance 
	# except it is 1% - 5% less. The annuity portion of the allowance is reduced as well. 
	# Upon death, the surviving beneficiary of record (if there is no beneficiary alive
	# there is a judgement by the State Retirement Board as to who can recive the benefits)
	# will be paid the remaining balance of the accumulated total deductions. The approcimate
	# reduction precentage is related to the age of the member (the percentage increases 
	# with age). If the annuity savings is depleted upon death then the survivor beneficiary
	# won't receive any payment. 

	# Option C - Joint Survivor Allowance. Like option A there is a lifetime allowance 
	# except it is 7% - 15% less. Unlike option B the reduction can also be effected by the 
	# age difference between a member and their beneficary. Upon death, the surviving 
	# beneficiary of record will be paid a monthly allowance for the remainder of their life.
	# Their monthly allowance will be 2/3 that of the monthly allowance the member was 
	# recieving. One's monthly allowance depends on multiple factors like the life 
	# expentancy of both the member and the beneficiary. The calcuating benefit factor is 
	# based on the nearest birthday for the person.
	# Note: If a beneficary predeceases the member a new beneficary can't be chosen. However 
	# the monthly benefit will "pop up" to option A benefit amount plus any adusjments.

# The age factor depends on a person's age and group
# page 20 - 21
def age_factor(group):
	if self.start_date < April 2, 2012:
		if group == 1:
			if self.age >= 65:
				age_factor = 2.5
			if self.age == 64:
				age_factor = 2.4
			if self.age == 63:
				age_factor = 2.3
			if self.age == 62:
				age_factor = 2.2
			if self.age == 61:
				age_factor = 2.1
			if self.age == 60:
				age_factor = 2.0
			if self.age == 59:
				age_factor = 1.9
			if self.age == 58:
				age_factor = 1.8
			if self.age == 57:
				age_factor = 1.7
			if self.age == 56:
				age_factor = 1.6
			if self.age == 55:
				age_factor = 1.5

		if group == 2:
			if self.age >= 60:
				age_factor = 2.5
			if self.age == 59:
				age_factor = 2.4
			if self.age == 58:
				age_factor = 2.3
			if self.age == 57:
				age_factor = 2.2
			if self.age == 56:
				age_factor = 2.1
			if self.age == 55:
				age_factor = 2.0
			
		if group == 4:
			if self.age >= 55:
				age_factor = 2.5
			if self.age == 54:
				age_factor = 2.4
			if self.age == 53:
				age_factor = 2.3
			if self.age == 52:
				age_factor = 2.2
			if self.age == 51:
				age_factor = 2.1
			if self.age == 50:
				age_factor = 2.0
			if self.age == 49:
				age_factor = 1.9
			if self.age == 48:
				age_factor = 1.8
			if self.age == 47:
				age_factor = 1.7
			if self.age == 46:
				age_factor = 1.6
			if self.age == 45:
				age_factor = 1.5

	if self.start_date >= April 2, 2012:
		if group == 1:
			if self.age >= 67:
				age_factor = 2.5
			if self.age == 66:
				age_factor = 2.35
			if self.age == 65:
				age_factor = 2.2
			if self.age == 64:
				age_factor = 2.05
			if self.age == 63:
				age_factor = 1.9
			if self.age == 62:
				age_factor = 1.75
			if self.age == 61:
				age_factor = 1.6
			if self.age == 60:
				age_factor = 1.45

		if group == 2:
			if self.age >= 62:
				age_factor = 2.5
			if self.age == 61:
				age_factor = 2.35
			if self.age == 60:
				age_factor = 2.2
			if self.age == 59:
				age_factor = 2.05
			if self.age == 58:
				age_factor = 1.9
			if self.age == 57:
				age_factor = 1.75
			if self.age == 56:
				age_factor = 1.6
			if self.age == 55:
				age_factor = 1.45
			
		if group == 4:
			if self.age >= 57:
				age_factor = 2.5
			if self.age == 56:
				age_factor = 2.35
			if self.age == 55:
				age_factor = 2.2
			if self.age == 54:
				age_factor = 2.05
			if self.age == 53:
				age_factor = 1.9
			if self.age == 52:
				age_factor = 1.75
			if self.age == 51:
				age_factor = 1.6
			if self.age == 50:
				age_factor = 1.45

	if self.start_date >= April 2, 2012 && self.credit_service_years >= 30:
		if group == 1:
			if self.age >= 67:
				age_factor = 2.5
			if self.age == 66:
				age_factor = 2.375
			if self.age == 65:
				age_factor = 2.25
			if self.age == 64:
				age_factor = 2.125
			if self.age == 63:
				age_factor = 2.0
			if self.age == 62:
				age_factor = 1.875
			if self.age == 61:
				age_factor = 1.750
			if self.age == 60:
				age_factor = 1.625

		if group == 2:
			if self.age >= 62:
				age_factor = 2.5
			if self.age == 61:
				age_factor = 2.375
			if self.age == 60:
				age_factor = 2.225
			if self.age == 59:
				age_factor = 2.125
			if self.age == 58:
				age_factor = 2.0
			if self.age == 57:
				age_factor = 1.875
			if self.age == 56:
				age_factor = 1.75
			if self.age == 55:
				age_factor = 1.625
			
		if group == 4:
			if self.age >= 57:
				age_factor = 2.5
			if self.age == 56:
				age_factor = 2.375
			if self.age == 55:
				age_factor = 2.225
			if self.age == 54:
				age_factor = 2.125
			if self.age == 53:
				age_factor = 2.0
			if self.age == 52:
				age_factor = 1.875
			if self.age == 51:
				age_factor = 1.75
			if self.age == 50:
				age_factor = 1.625

# The benefit rate is determined by age as of the last birthday, years of creditable 
# service, and  group classification.  The benefit rate is a percentage of the amount 
# average annual rate of compensation.
# If entered state service prior to April 2, 2012, the average is based on the highest 
# consecutive 36 month salary average. If entered state service on or after April 2, 2012, 
# the average is based on the highest  five year salary average. The age factor multiplied 
# by the number of years of service determines this percentage.  The maximum pension is 80% 
# of the salary average.
# page 22 - 23
def calc_retirement_benefit():
	# if a member works mutiple jobs in different groups there are diff calcs
	if self.multiple_jobs == false:
		annual_benefit = (age_factor(self.job.group) * self.credit_service_years * self.
		salary_avg)
	if self.multiple_jobs == true:
		for job in self.jobs:
			annual_benefit += age_factor(job.group) * self.credit_service_years * self.
			salary_avg)
		if (self.salary_avg * .8) < annual_benefit:
			annual_benefit = self.salary_avg * .8
	if self.veteran == true:
		annual_benefit +=  15

	monthly_benefit = annual_benefit / 12


# page 24
def calculate_pension():
	percent_pension = (age_factor(self.job.group) * self.credit_service_years
	# pension estimate for Option A
	pension = self.salary_avg * percent_pension

	# pension estimate for Option B
	# User needs to select percentage (.99 - .95)
	pension *= user_selected_percentage

	# pension estimate for Option C
	# User needs to select percentage (.93 - .85)
	pension *= user_selected_percentage



